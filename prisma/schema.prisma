generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String  @id @unique

  email                  String  @unique
  username               String  @unique

  avatar                 String?

  updated                DateTime @updatedAt
  created                DateTime @default(now())

  auth_session Session[]
  key          Key[]

  article_movements SCMArticleMovements[]
  attached_projects SCMProjetAttachedUser[]
  orders SCMOrder[]
}

model UserInvitation {

  id                     String  @id @unique @default(uuid())
  email                  String  @unique

  created                DateTime @default(now())
  
}

model Session {
  id        String  @id @unique
  user_id   String  
  active_expires BigInt
  idle_expires  BigInt
  user User @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model AppSettings {
  key             String  @id @unique
  value           String
}

model SCMArticle {
  id                String   @id @default(uuid()) @unique

  name              String?
  brand             String?
  reference         String?

  order_quantity    Float   @default(0)
  critical_quantity Int @default(0)

  consumable        Boolean @default(false)
  non_physical      Boolean @default(false)
  internal          Boolean @default(false)

  unit              String?
  unit_quantity     Int?

  thumbnail         String?

  acticle_movements SCMArticleMovements[]
  store_relations SCMStoreRelation[]
  article_assembly_relations SCMAssemblyRelation[]
  order_rows SCMOrderRows[]

  files SCMArticleFile[]

}

model SCMArticleFile {
  id                String @id @default(uuid()) @unique

  article_id        String
  article           SCMArticle @relation(references: [id], fields: [article_id], onDelete: Cascade)

  file              String
}

model SCMSupplier {
  id            String @id @default(uuid()) @unique
  
  name          String
  internal      Boolean @default(false)
  logo          String?

  email         String?
  phone         String?
  website       String?

  address       String?

  payment_rule  String?

  orders        SCMOrder[]

}

model SCMArticleMovements {
  id                  String  @id @default(uuid()) @unique

  article_id          String
  article             SCMArticle @relation(references: [id], fields: [article_id], onDelete: Cascade)

  created             DateTime  @default(now())
  quantity_update     Float  @default(0)

  user_id             String
  user User           @relation(references: [id], fields: [user_id], onDelete: Cascade)

  store_in_id         String?
  store_in            SCMStore? @relation("store_out", references: [id], fields: [store_in_id], onDelete: Cascade)

  store_out_id        String?
  store_out           SCMStore? @relation("store_in", references: [id], fields: [store_out_id], onDelete: Cascade)
}

model SCMStore {
  id                  String @id @default(uuid()) @unique
  location            String @default("")
  name                String @default("")
  updated             String @default("")
  temporary           Boolean @default(false)

  store_in_article_movements SCMArticleMovements[] @relation("store_in")
  store_out_article_movements SCMArticleMovements[] @relation("store_out")

  store_relations SCMStoreRelation[]
}

model SCMStoreRelation {

  article_id      String
  article         SCMArticle @relation(references: [id], fields: [article_id], onDelete: Cascade)

  quantity        Float @default(0)

  store_id        String
  store           SCMStore @relation(references: [id], fields: [store_id], onDelete: Cascade)

  @@id([article_id, store_id]) // unique index based on article_id and store_id

}

model SCMAssembly {
  id             String  @id @default(uuid()) @unique

  name           String
  description    String?
  assembly_time  Float @default(0)
  thumbnail      String?

  created        DateTime   @default(now())
  updated        DateTime   @updatedAt

  buylists       SCMAssemblyBuylists[]

  assembly_relation_parent SCMAssemblyRelation[] @relation("assembly_relation_parent")
  assembly_relations SCMAssemblyRelation[] @relation("assembly_relation_children")

}

model SCMAssemblyRelation {

  id                  String  @id @default(uuid()) @unique

  parent_id           String  @default("")
  parent              SCMAssembly @relation("assembly_relation_parent", references: [id], fields: [parent_id], onDelete: Cascade)

  article_child_id    String?  @default("")
  article_child       SCMArticle? @relation(references: [id], fields: [article_child_id], onDelete: Cascade)

  assembly_child_id   String?  @default("")
  assembly_child      SCMAssembly? @relation("assembly_relation_children", references: [id], fields: [assembly_child_id], onDelete: Cascade)

  created             DateTime @default(now())
  quantity            Float @default(0)
  updated             DateTime @updatedAt  
  order               Int @default(0)

}

model SCMAssemblyBuylists {

  id            String  @id @default(uuid()) @unique
  name          String  @default("")

  assembly_id   String  @default("")
  assembly      SCMAssembly @relation(references: [id], fields: [assembly_id], onDelete: Cascade)

  project_id    String?  @default("")
  project       SCMProject? @relation(references: [id], fields: [project_id], onDelete: Cascade)
  
  store_id      String  @default("")

  created       DateTime   @default(now())
  closed        Boolean @default(false)

}

model SCMProject {
  id                  String   @id @default(uuid()) @unique
  name                String?  @default("")

  created             DateTime @default(now())
  end_date            DateTime?
  start_date          DateTime?

  customer            String?
  closed              Boolean @default(false)

  assembly_buylists   SCMAssemblyBuylists[]
  attached_users      SCMProjetAttachedUser[]
  order_rows          SCMOrderRows[]

}

model SCMProjetAttachedUser {

  id                  String   @id @default(uuid()) @unique

  role                String?

  project_id          String
  project             SCMProject @relation(references: [id], fields: [project_id], onDelete: Cascade)

  user_id             String
  user                User @relation(references: [id], fields: [user_id], onDelete: Cascade)

}

model SCMOrder {
  id                  String   @id @default(uuid()) @unique
  sub_id              String   @unique

  created             DateTime @default(now())
  updated             DateTime @updatedAt

  issuer_id           String
  issuer              User @relation(references: [id], fields: [issuer_id], onDelete: Cascade)

  supplier_id         String
  supplier            SCMSupplier @relation(references: [id], fields: [supplier_id], onDelete: Cascade)

  state               String @default("draft")
  name                String

  vat                 Float @default(0)
  delivery_fees       Float @default(0)

  order_rows          SCMOrderRows[]
}

model SCMOrderRows {
  id                  String   @id @default(uuid()) @unique

  created             DateTime @default(now()) 
  updated             DateTime @updatedAt

  order_id            String
  order               SCMOrder @relation(references: [id], fields: [order_id], onDelete: Cascade)
  
  project_id          String?
  project             SCMProject? @relation(references: [id], fields: [project_id], onDelete: Cascade)

  article_id          String
  article             SCMArticle @relation(references: [id], fields: [article_id], onDelete: Cascade)

  needed_date         DateTime?
  needed_quantity     Float  @default(0)

  ack_date            DateTime?
  ack_price           Float?  @default(0)

  received_quantity   Float  @default(0)
}

model SCMFabricationOrders {
  id                  String   @id @default(uuid()) @unique

  applicant  String? @default("")
  article    String? @default("")
  created    String  @default("")
  project    String? @default("")
  quantity   Float?  @default(0)
  receiver   String? @default("")
  updated    String  @default("")
  start_date String? @default("")
  end_date   String? @default("")
  state      String? @default("")
}

model CRMCompany {
  country String? @default("")
  created String  @default("")
  field   String? @default("")
  id      String  @id
  name    String? @unique(map: "idx_unique_uekhyfzz") @default("")
  sector  String? @default("")
  size    String? @default("")
  type    String? @default("")
  updated String  @default("")

  @@index([created], map: "_hpcza1xtofbf32u_created_idx")
}

model crm_company_contact {
  address      String? @default("")
  company_role String? @default("")
  created      String  @default("")
  id           String  @id
  name         String? @default("")
  phone        String? @default("")
  spoken_langs String? @default("")
  updated      String  @default("")
  company      String? @default("")
  email        String? @default("")

  @@index([created], map: "_s9sikvx18enu1n4_created_idx")
}

model crm_interest {
  created     String  @default("")
  description String? @default("")
  id          String  @id
  name        String? @default("")
  updated     String  @default("")
  color       String? @default("")

  @@index([created], map: "_906o32s8n1x48c9_created_idx")
}

model crm_leads {
  comment          String? @default("")
  company          String? @default("")
  company_contacts String? @default("")
  created          String  @default("")
  id               String  @id
  origin           String? @default("")
  state            String? @default("")
  updated          String  @default("")

  @@index([created], map: "_qqwhmu2ilwiapgl_created_idx")
}

model crm_leads_interests {
  created  String   @default("")
  id       String   @id
  interest String?  @default("")
  lead     String?  @default("")
  order    Decimal? @default(0)
  updated  String   @default("")

  @@index([created], map: "_70sznq87hrb1cqt_created_idx")
}