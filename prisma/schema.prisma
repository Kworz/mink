generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                     String  @id @unique

  email                  String  @unique
  username               String  @unique

  avatar                 String?

  updated                DateTime @updatedAt
  created                DateTime @default(now())

  auth_session           auth_session[]
  key                    auth_key[]

  article_movements      scm_article_movements[]
  
  attached_projects      pr_project_attached_user[]

  orders                 scm_order[]
  order_state_changes    scm_order_state_change[]

  manufacturing_orders_asked            scm_manufacturing_order[] @relation("manufacturing_order_asked")
  manufacturing_orders_received         scm_manufacturing_order[] @relation("manufacturing_order_received")
  manufacturing_orders_state_changes    scm_manufacturing_oder_state_change[]

}

model user_invitation {

  id                     String  @id @unique @default(uuid())
  email                  String  @unique

  created                DateTime @default(now())
  
}

model auth_session {
  id                String  @id @unique
  user_id           String  
  active_expires    BigInt
  idle_expires      BigInt
  user              user @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model auth_key {
  id                  String  @id @unique
  hashed_password     String?
  user_id             String
  user                user    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model app_settings {
  key             app_settings_keys  @id @unique
  value           String
}

enum app_settings_keys {

  // mink settings
  app_configured

  // mink s3 settings
  app_s3_region
  app_s3_bucketname

  // company settings
  company_name

  company_address_road
  company_address_city
  company_address_postal_code
  company_address_country

  company_default_vat

}

model scm_article {
  id                String   @id @default(uuid()) @unique

  name              String?
  brand             String?
  reference         String?

  order_quantity    Float @default(0)
  critical_quantity Int @default(0)

  consumable        Boolean @default(false)
  non_physical      Boolean @default(false)
  internal          Boolean @default(false)

  unit              unit_of_work @default(unit)
  unit_quantity     Float?

  thumbnail         String?

  acticle_movements           scm_article_movements[]
  store_relations             scm_store_relation[]
  order_rows                  scm_order_rows[]

  article_assembly_relations  scm_assembly_relation_article[]

  files                       scm_article_file[]

  manufacturing_orders          scm_manufacturing_order[]

}

enum unit_of_work {
  unit
  kilogram
  gram
  liter
  centiliter
  milliliter
  meter
  centimeter
  millimeter

  // Containers, if set to one of this values, the unit_quantity will be required
  c_box
  c_bottle_liter
  c_bottle_centiliter
  c_bottle_milliliter
}

model scm_article_file {
  id                String @id @default(uuid()) @unique

  article_id        String
  article           scm_article @relation(references: [id], fields: [article_id], onDelete: Cascade)

  file              String
}

model scm_supplier {
  id                      String @id @default(uuid()) @unique
  
  name                    String
  internal                Boolean @default(false)
  logo                    String?

  email                   String?
  phone                   String?
  website                 String?

  address_road            String?
  address_city            String?
  address_postal_code     String?
  address_country         String?

  payment_rule            payment_rule?
  payment_method          payment_method[]

  orders                  scm_order[]
}

enum payment_method {
  cash
  bank_transfer
  credit_card
  check
  paypal
  other
}

enum payment_rule {

  immediate
  on_receipt
  on_delivery
  on_order
  on_invoice
  on_invoice_30
  on_invoice_60

}

model scm_article_movements {
  id                  String  @id @default(uuid()) @unique

  article_id          String
  article             scm_article @relation(references: [id], fields: [article_id], onDelete: Cascade)

  created             DateTime  @default(now())
  quantity_update     Float  @default(0)

  user_id             String
  user user           @relation(references: [id], fields: [user_id], onDelete: Cascade)

  store_in_id         String?
  store_in            scm_store? @relation("store_out", references: [id], fields: [store_in_id], onDelete: Cascade)

  store_out_id        String?
  store_out           scm_store? @relation("store_in", references: [id], fields: [store_out_id], onDelete: Cascade)
}

model scm_store {
  id                  String @id @default(uuid()) @unique
  location            String @default("")
  name                String @default("")
  updated             String @default("")
  temporary           Boolean @default(false)

  store_in_article_movements    scm_article_movements[] @relation("store_in")
  store_out_article_movements   scm_article_movements[] @relation("store_out")

  store_relations               scm_store_relation[]
}

model scm_store_relation {

  article_id      String
  article         scm_article @relation(references: [id], fields: [article_id], onDelete: Cascade)

  quantity        Float @default(0)

  store_id        String
  store           scm_store @relation(references: [id], fields: [store_id], onDelete: Cascade)

  @@id([article_id, store_id]) // unique index based on article_id and store_id

}

model scm_assembly {
  id             String  @id @default(uuid()) @unique

  name           String
  description    String?
  assembly_time  Float @default(0)
  thumbnail      String?

  created        DateTime   @default(now())
  updated        DateTime   @updatedAt

  buylists       scm_assembly_buylist[]

  article_childrens     scm_assembly_relation_article[] @relation("assembly_relation_parent_of_articles")
  assembly_childrens    scm_assembly_relation_sub_assembly[] @relation("assembly_relation_parent_of_subassembly")

  parent_assemblies     scm_assembly_relation_sub_assembly[] @relation("assembly_relation_children_subassembly")
}

model scm_assembly_relation_sub_assembly {

  id                  String  @id @default(uuid()) @unique

  parent_id           String
  parent              scm_assembly @relation("assembly_relation_parent_of_subassembly", references: [id], fields: [parent_id], onDelete: Cascade)

  assembly_child_id   String
  assembly_child      scm_assembly @relation("assembly_relation_children_subassembly", references: [id], fields: [assembly_child_id], onDelete: Cascade)

  created             DateTime @default(now())
  quantity            Float @default(0)
  updated             DateTime @updatedAt 
  order               Int @default(0)
}

model scm_assembly_relation_article {

  id                  String  @id @default(uuid()) @unique

  parent_id           String
  parent              scm_assembly @relation("assembly_relation_parent_of_articles", references: [id], fields: [parent_id], onDelete: Cascade)

  article_child_id    String
  article_child       scm_article @relation(references: [id], fields: [article_child_id], onDelete: Cascade)

  created             DateTime @default(now())
  quantity            Float @default(0)
  updated             DateTime @updatedAt 
  order               Int @default(0)
}

model scm_assembly_buylist {

  id            String  @id @default(uuid()) @unique
  name          String  @default("")

  assembly_id   String  @default("")
  assembly      scm_assembly @relation(references: [id], fields: [assembly_id], onDelete: Cascade)

  project_id    String?  @default("")
  project       pr_project? @relation(references: [id], fields: [project_id], onDelete: Cascade)
  
  store_id      String  @default("")

  created       DateTime   @default(now())
  closed        Boolean @default(false)

}

model scm_order {

  id                  String   @id @default(uuid()) @unique
  sub_id              String   @unique

  created             DateTime @default(now())
  updated             DateTime @updatedAt

  issuer_id           String
  issuer              user @relation(references: [id], fields: [issuer_id], onDelete: Cascade)

  supplier_id         String
  supplier            scm_supplier @relation(references: [id], fields: [supplier_id], onDelete: Cascade)

  state               scm_order_state @default(draft)
  name                String

  vat                 Float @default(0)
  delivery_fees       Float @default(0)

  order_rows          scm_order_rows[]
  state_changes       scm_order_state_change[]
}

model scm_order_state_change {

  id                    String @id @default(uuid()) @unique

  order_id              String
  order                 scm_order @relation(references: [id], fields: [order_id], onDelete: Cascade)

  state                 scm_order_state
  comment               String?
  date                  DateTime @default(now())
  
  user_id               String @default("")
  user                  user @relation(references: [id], fields: [user_id], onDelete: Cascade)

}

enum scm_order_state {
  draft
  quotation
  sent
  acknowledged
  completed
  cancelled
}

model scm_order_rows {

  id                  String   @id @default(uuid()) @unique

  created             DateTime @default(now()) 
  updated             DateTime @updatedAt

  order_id            String
  order               scm_order @relation(references: [id], fields: [order_id], onDelete: Cascade)
  
  project_id          String?
  project             pr_project? @relation(references: [id], fields: [project_id], onDelete: Cascade)

  article_id          String
  article             scm_article @relation(references: [id], fields: [article_id], onDelete: Cascade)

  needed_date         DateTime?
  needed_quantity     Float  @default(0)

  ack_date            DateTime?
  ack_price           Float?  @default(0)

  received_quantity   Float  @default(0)
}

model scm_manufacturing_order {

  id                  String @id @default(uuid()) @unique

  askedBy_id          String
  askedBy             user @relation("manufacturing_order_asked", references: [id], fields: [askedBy_id], onDelete: Cascade)
  
  receiver_id         String?
  receiver            user? @relation("manufacturing_order_received", references: [id], fields: [receiver_id], onDelete: Cascade)

  article_id          String
  article             scm_article @relation(references: [id], fields: [article_id], onDelete: Cascade)

  project_id          String?
  project             pr_project? @relation(references: [id], fields: [project_id], onDelete: Cascade)

  quantity            Float @default(1)
  state               scm_manufacturing_order_state @default(draft)

  start_date          DateTime?
  end_date            DateTime?

  created             DateTime @default(now())
  updated             DateTime @updatedAt

  state_changes       scm_manufacturing_oder_state_change[]
  
}

model scm_manufacturing_oder_state_change {

  id                    String @id @default(uuid()) @unique

  manufacturing_order_id  String
  manufacturing_order     scm_manufacturing_order @relation(references: [id], fields: [manufacturing_order_id], onDelete: Cascade)

  state                 scm_manufacturing_order_state
  comment               String?
  date                  DateTime @default(now())
  
  user_id               String @default("")
  user                  user @relation(references: [id], fields: [user_id], onDelete: Cascade)

}

enum scm_manufacturing_order_state {
  draft
  ready
  in_progress
  completed
  cancelled
}

model crm_company {

  id      String  @id @default(uuid()) @unique

  name    String
  size    crm_company_size
  
  country String?
  sector  String?
  type    String?
  
  created DateTime @default(now())
  updated DateTime @updatedAt

  contacts crm_company_contact[]
  leads crm_leads[]

}

enum crm_company_size {

  tiny
  small
  medium
  big
  large
  huge

}

model crm_company_contact {

  id           String  @id @default(uuid()) @unique
  
  name         String
  position     String?
  address      String?
  phone        String?
  email        String?
  spoken_langs String[]

  company_id   String
  company      crm_company @relation(references: [id], fields: [company_id], onDelete: Cascade)      

  created       DateTime @default(now())
  updated       DateTime @updatedAt

  attached_leads crm_leads_contacts[]

}

model crm_interest {

  id                  String  @id @default(uuid()) @unique

  name                String
  description         String?
  color               String?

  created             DateTime @default(now())
  updated             DateTime @updatedAt

  leads crm_leads_interests[]

}

model crm_leads {

  id               String  @id @default(uuid()) @unique

  comment          String?
  origin           String?
  state            String?

  company_id       String
  company          crm_company @relation(references: [id], fields: [company_id], onDelete: Cascade)

  created          DateTime @default(now())
  updated          DateTime @updatedAt

  contacts crm_leads_contacts[]
  interests crm_leads_interests[]

}

model crm_leads_contacts {

  id               String  @id @default(uuid()) @unique

  lead_id          String
  lead             crm_leads @relation(references: [id], fields: [lead_id], onDelete: Cascade)

  contact_id       String
  contact          crm_company_contact @relation(references: [id], fields: [contact_id], onDelete: Cascade)

}

model crm_leads_interests {

  id              String   @id @default(uuid()) @unique

  order           Decimal? @default(0)

  interest_id     String
  interest        crm_interest @relation(references: [id], fields: [interest_id], onDelete: Cascade)

  lead_id         String
  lead            crm_leads @relation(references: [id], fields: [lead_id], onDelete: Cascade)

  created         DateTime @default(now())
  updated         DateTime @updatedAt

}

model pr_project {
  id                  String   @id @default(uuid()) @unique
  name                String?  @default("")

  created             DateTime @default(now())
  end_date            DateTime?
  start_date          DateTime?

  customer            String?
  closed              Boolean @default(false)

  assembly_buylists   scm_assembly_buylist[]
  order_rows          scm_order_rows[]
  
  attached_users      pr_project_attached_user[]

  manufacturing_orders  scm_manufacturing_order[]

}

model pr_project_attached_user {

  id                  String   @id @default(uuid()) @unique

  role                String?

  project_id          String
  project             pr_project @relation(references: [id], fields: [project_id], onDelete: Cascade)

  user_id             String
  user                user @relation(references: [id], fields: [user_id], onDelete: Cascade)

}